apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: pngbanks/frontend:prod
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: env-config
          mountPath: /usr/share/nginx/html/env-config.js
          subPath: env-config.js
      volumes:
      - name: nginx-config
        configMap:
          name: frontend-nginx-config
      - name: env-config
        configMap:
          name: frontend-env-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: microservices
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-config
  namespace: microservices
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        
        # Serve static files
        location / {
            try_files $uri $uri/ /index.html;
            add_header 'Access-Control-Allow-Origin' '*';
        }
        
        # Serve JavaScript files with correct MIME type
        location ~* \.js$ {
            add_header Content-Type application/javascript;
            try_files $uri =404;
        }
        
        # Serve CSS files with correct MIME type
        location ~* \.css$ {
            add_header Content-Type text/css;
            try_files $uri =404;
        }
        
        # Serve asset files
        location /assets/ {
            try_files $uri =404;
        }

        # Handle API requests
        location /api/ {
            proxy_pass http://api-gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-env-config
  namespace: microservices
data:
  env-config.js: |
    // This file is generated at build time and injected into the static HTML
    window.ENV = {
      API_URL: '/api',
      AUTH0_DOMAIN: 'dev-i9j8l4xe.us.auth0.com',
      AUTH0_CLIENT_ID: 'JBfJJE07F7yrWTPq7nZ04WO4XdqzPvOa',
      AUTH0_AUDIENCE: 'https://api.inspira.com',
      AUTH0_REDIRECT_URI: window.location.origin,
      ENV: 'production'
    };
    console.log('Environment config loaded:', window.ENV);
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-new-external
  namespace: microservices
spec:
  selector:
    app: frontend-new
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer 