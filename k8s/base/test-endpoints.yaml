apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-test-endpoints
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-test-endpoints
  template:
    metadata:
      labels:
        app: api-test-endpoints
    spec:
      containers:
      - name: api-test-endpoints
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /usr/share/nginx/html
      volumes:
      - name: nginx-config
        configMap:
          name: api-test-endpoints-config
---
apiVersion: v1
kind: Service
metadata:
  name: api-test-endpoints
  namespace: microservices
spec:
  selector:
    app: api-test-endpoints
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-test-endpoints-config
  namespace: microservices
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Inspira API Test Endpoints</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; line-height: 1.6; }
        h1 { color: #333; }
        .endpoint { background-color: #f4f4f4; padding: 15px; margin-bottom: 15px; border-radius: 5px; }
        .endpoint h3 { margin-top: 0; }
        pre { background-color: #eee; padding: 10px; border-radius: 3px; overflow-x: auto; }
        .success { color: green; }
        .error { color: red; }
        button { padding: 8px 16px; background-color: #4CAF50; color: white; border: none; cursor: pointer; border-radius: 4px; }
        button:hover { background-color: #45a049; }
      </style>
    </head>
    <body>
      <h1>Inspira Microservices Test Endpoints</h1>
      
      <div class="endpoint">
        <h3>API Gateway Test</h3>
        <button onclick="testEndpoint('api-gateway', '/api/gateway/health.html')">Test API Gateway</button>
        <div id="api-gateway-result"></div>
      </div>
      
      <div class="endpoint">
        <h3>User Service Test</h3>
        <button onclick="testEndpoint('user-service', '/api/users/health.html')">Test User Service</button>
        <div id="user-service-result"></div>
      </div>
      
      <div class="endpoint">
        <h3>Content Service Test</h3>
        <button onclick="testEndpoint('content-service', '/api/content/health.html')">Test Content Service</button>
        <div id="content-service-result"></div>
      </div>
      
      <div class="endpoint">
        <h3>Media Service Test</h3>
        <button onclick="testEndpoint('media-service', '/api/media/health.html')">Test Media Service</button>
        <div id="media-service-result"></div>
      </div>
      
      <div class="endpoint">
        <h3>Test All Services</h3>
        <button onclick="testAllEndpoints()">Test All Services</button>
      </div>
      
      <script>
        function testEndpoint(service, endpoint) {
          const resultDiv = document.getElementById(`${service}-result`);
          resultDiv.innerHTML = `<p>Testing ${service}...</p>`;
          
          fetch(endpoint)
            .then(response => {
              if (!response.ok) {
                throw new Error(`HTTP error ${response.status}`);
              }
              return response.text();
            })
            .then(data => {
              resultDiv.innerHTML = `
                <p class="success">✅ ${service} is working!</p>
                <pre>${data.substring(0, 200)}${data.length > 200 ? '...' : ''}</pre>
              `;
            })
            .catch(error => {
              resultDiv.innerHTML = `
                <p class="error">❌ Error connecting to ${service}: ${error.message}</p>
              `;
            });
        }
        
        function testAllEndpoints() {
          testEndpoint('api-gateway', '/api/gateway/health.html');
          testEndpoint('user-service', '/api/users/health.html');
          testEndpoint('content-service', '/api/content/health.html');
          testEndpoint('media-service', '/api/media/health.html');
        }
      </script>
    </body>
    </html>
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-endpoints-ingress
  namespace: microservices
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /test
        pathType: Prefix
        backend:
          service:
            name: api-test-endpoints
            port:
              number: 80 