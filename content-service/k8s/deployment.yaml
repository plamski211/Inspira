# content-service/k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: content-service
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: content-service
  template:
    metadata:
      labels:
        app: content-service
    spec:
      containers:
      - name: content-service
        image: ${REGISTRY}/content-service:${TAG}
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: AUTH_SERVICE_URL
          value: "http://auth-service"
        - name: USER_SERVICE_URL
          value: "http://user-service"
        - name: MEDIA_SERVICE_URL
          value: "http://media-service"
        - name: KAFKA_BROKERS
          value: "kafka-0.kafka-headless:9092,kafka-1.kafka-headless:9092"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: content-config
              key: db-host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: content-config
              key: db-port
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: content-config
              key: db-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: content-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: content-secrets
              key: db-password
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: content-service
  namespace: microservices
spec:
  selector:
    app: content-service
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP