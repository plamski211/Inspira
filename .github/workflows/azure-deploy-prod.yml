name: Azure Production Deployment

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AZURE_RESOURCE_GROUP: inspira-project
  AKS_CLUSTER_NAME: inspira-aks
  NAMESPACE: microservices
  STAGING_DOMAIN: staging.inspira-project.com
  PRODUCTION_DOMAIN: inspira-project.com

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'code-scanning'

  build:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
      
      - name: Build and push API Gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
      
      - name: Build and push User Service image
        uses: docker/build-push-action@v4
        with:
          context: ./user-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest
      
      - name: Build and push Content Service image
        uses: docker/build-push-action@v4
        with:
          context: ./content-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/content-service:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/content-service:latest
      
      - name: Build and push Media Service image
        uses: docker/build-push-action@v4
        with:
          context: ./media-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/media-service:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/media-service:latest
      
      - name: Scan Docker images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Test API Gateway
        run: |
          cd api-gateway
          ./mvnw test
      
      - name: Test User Service
        run: |
          cd user-service
          ./gradlew test
      
      - name: Test Content Service
        run: |
          cd content-service
          ./gradlew test
      
      - name: Test Media Service
        run: |
          cd media-service
          ./gradlew test
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Test Frontend
        run: |
          cd frontend
          npm ci
          npm test
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            **/build/reports/tests/
            **/target/surefire-reports/
            frontend/coverage/

  load-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz
          tar -xzf apache-jmeter-5.5.tgz
          
      - name: Run load tests
        run: |
          ./apache-jmeter-5.5/bin/jmeter -n -t load-test-plan.jmx -l load-test-results.jtl -e -o load-test-report
      
      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: |
            load-test-results.jtl
            load-test-report/

  deploy-staging:
    needs: [test, load-test]
    if: ${{ github.event_name == 'push' || github.event.inputs.environment == 'staging' }}
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      
      - name: Update Kubernetes manifests
        run: |
          sed -i "s|image: .*frontend.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}|g" k8s/overlays/dev/frontend-deployment.yaml
          sed -i "s|image: .*api-gateway.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.sha }}|g" k8s/overlays/dev/api-gateway-deployment.yaml
          sed -i "s|image: .*user-service.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ github.sha }}|g" k8s/overlays/dev/user-service-deployment.yaml
          sed -i "s|image: .*content-service.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/content-service:${{ github.sha }}|g" k8s/overlays/dev/content-service-deployment.yaml
          sed -i "s|image: .*media-service.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/media-service:${{ github.sha }}|g" k8s/overlays/dev/media-service-deployment.yaml
      
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/overlays/dev/config.yaml
          kubectl apply -f k8s/overlays/dev/frontend-deployment.yaml
          kubectl apply -f k8s/overlays/dev/api-gateway-deployment.yaml
          kubectl apply -f k8s/overlays/dev/user-service-deployment.yaml
          kubectl apply -f k8s/overlays/dev/content-service-deployment.yaml
          kubectl apply -f k8s/overlays/dev/media-service-deployment.yaml
          kubectl apply -f k8s/overlays/dev/ingress.yaml
          
          # Apply monitoring configurations
          kubectl apply -f k8s/base/service-monitors.yaml
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/api-gateway -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/user-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/content-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/media-service -n ${{ env.NAMESPACE }} --timeout=300s
      
      - name: Run integration tests
        run: |
          echo "Running integration tests against staging environment"
          # Add integration test commands here
      
      - name: Verify monitoring setup
        run: |
          echo "Verifying Prometheus and Grafana are running"
          kubectl get pods -n monitoring
          kubectl get servicemonitors -n monitoring

  deploy-production:
    needs: deploy-staging
    if: ${{ github.event.inputs.environment == 'production' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      
      - name: Update Kubernetes manifests
        run: |
          sed -i "s|image: .*frontend.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}|g" k8s/overlays/prod/frontend-deployment.yaml
          sed -i "s|image: .*api-gateway.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.sha }}|g" k8s/overlays/prod/api-gateway-deployment.yaml
          sed -i "s|image: .*user-service.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ github.sha }}|g" k8s/overlays/prod/user-service-deployment.yaml
          sed -i "s|image: .*content-service.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/content-service:${{ github.sha }}|g" k8s/overlays/prod/content-service-deployment.yaml
          sed -i "s|image: .*media-service.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/media-service:${{ github.sha }}|g" k8s/overlays/prod/media-service-deployment.yaml
      
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/overlays/prod/config.yaml
          kubectl apply -f k8s/overlays/prod/frontend-deployment.yaml
          kubectl apply -f k8s/overlays/prod/api-gateway-deployment.yaml
          kubectl apply -f k8s/overlays/prod/user-service-deployment.yaml
          kubectl apply -f k8s/overlays/prod/content-service-deployment.yaml
          kubectl apply -f k8s/overlays/prod/media-service-deployment.yaml
          kubectl apply -f k8s/overlays/prod/ingress.yaml
          
          # Apply monitoring configurations
          kubectl apply -f k8s/base/service-monitors.yaml
          kubectl apply -f k8s/base/horizontal-pod-autoscalers.yaml
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/api-gateway -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/user-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/content-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/media-service -n ${{ env.NAMESPACE }} --timeout=300s
      
      - name: Post-deployment health check
        run: |
          # Get the ingress IP
          INGRESS_IP=$(kubectl get ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
          
          # Check frontend
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PRODUCTION_DOMAIN }}/ | grep 200
          
          # Check API Gateway
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PRODUCTION_DOMAIN }}/api/gateway/health | grep 200
          
          # Check User Service
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PRODUCTION_DOMAIN }}/api/users/health | grep 200
          
          # Check Content Service
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PRODUCTION_DOMAIN }}/api/content/health | grep 200
          
          # Check Media Service
          curl -s -o /dev/null -w "%{http_code}" http://${{ env.PRODUCTION_DOMAIN }}/api/media/health | grep 200
      
      - name: Verify monitoring and autoscaling
        run: |
          echo "Verifying Prometheus and Grafana are running"
          kubectl get pods -n monitoring
          
          echo "Verifying HPAs are configured"
          kubectl get hpa -n ${{ env.NAMESPACE }}
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification commands (e.g., Slack, email)
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Production deployment failed!"
          # Add notification commands (e.g., Slack, email) 