name: Deploy to AKS

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'services/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      deploy_userservice:
        description: 'Deploy User Service'
        required: true
        default: true
        type: boolean

env:
  ACR_NAME: inspiraacr
  RESOURCE_GROUP: inspira-resources
  AKS_CLUSTER: inspira-cluster
  FRONTEND_IMAGE: inspira-frontend
  USER_SERVICE_IMAGE: user-service
  NAMESPACE: microservices

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER }}

      # Build and Deploy Frontend
      - name: Setup Node.js
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Create Frontend env-config.js
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        run: |
          mkdir -p frontend/public
          cat > frontend/public/env-config.js << EOF
          // This file is generated at build time and injected into the static HTML
          window.ENV = {
            API_URL: '/api',
            AUTH0_DOMAIN: 'dev-i9j8l4xe.us.auth0.com',
            AUTH0_CLIENT_ID: 'JBfJJE07F7yrWTPq7nZ04WO4XdqzPvOa',
            AUTH0_AUDIENCE: 'https://api.inspira.com',
            AUTH0_REDIRECT_URI: window.location.origin,
            BUILD_TIME: '$(date)',
            ENV: 'production'
          };
          console.log('Environment config loaded:', window.ENV);
          EOF
          
      - name: Build and Push Frontend Image
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        run: |
          cd frontend
          npm ci
          npm run build
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest
          
      - name: Deploy Frontend to AKS
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        run: |
          kubectl create configmap frontend-env-config \
            --from-file=env-config.js=frontend/public/env-config.js \
            --namespace ${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Update the image in deployment yaml
          sed -i "s|image: .*inspira-frontend:.*|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}|" frontend-new-deployment.yaml
          
          # Apply the deployment
          kubectl apply -f frontend-new-deployment.yaml
      
      # Build and Deploy User Service
      - name: Setup Java
        if: ${{ github.event.inputs.deploy_userservice != 'false' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
          
      - name: Build User Service
        if: ${{ github.event.inputs.deploy_userservice != 'false' }}
        run: |
          cd services/user-service
          ./gradlew clean bootJar
          
      - name: Build and Push User Service Image
        if: ${{ github.event.inputs.deploy_userservice != 'false' }}
        run: |
          cd services/user-service
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.USER_SERVICE_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.USER_SERVICE_IMAGE }}:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.USER_SERVICE_IMAGE }}:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.USER_SERVICE_IMAGE }}:latest
          
      - name: Deploy User Service to AKS
        if: ${{ github.event.inputs.deploy_userservice != 'false' }}
        run: |
          # Check if secret exists, create if not
          kubectl get secret user-service-secrets --namespace ${{ env.NAMESPACE }} > /dev/null 2>&1 || \
            kubectl create secret generic user-service-secrets \
              --from-literal=spring.datasource.username=${{ secrets.DB_USERNAME }} \
              --from-literal=spring.datasource.password=${{ secrets.DB_PASSWORD }} \
              --namespace ${{ env.NAMESPACE }}
              
          # Update the image in deployment yaml
          sed -i "s|image: .*user-service:.*|image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.USER_SERVICE_IMAGE }}:${{ github.sha }}|" user-service-deployment.yaml
          
          # Apply the deployment
          kubectl apply -f user-service-deployment.yaml
      
      # Update Ingress
      - name: Update Ingress
        run: |
          kubectl apply -f fixed-ingress.yaml
          
      - name: Verify Deployments
        run: |
          if [[ "${{ github.event.inputs.deploy_frontend }}" != "false" ]]; then
            kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }}
          fi
          
          if [[ "${{ github.event.inputs.deploy_userservice }}" != "false" ]]; then
            kubectl rollout status deployment/user-service -n ${{ env.NAMESPACE }}
          fi
          
          echo "Deployment successful! Check your services at your ingress IP." 