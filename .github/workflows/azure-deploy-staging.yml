name: Azure Staging Deployment

on:
  push:
    branches: [ develop ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  AZURE_RESOURCE_GROUP: inspira-project
  AKS_CLUSTER_NAME: inspira-aks
  NAMESPACE: staging
  DOCKER_USERNAME: pngbanks

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: pngbanks
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate image tag
        id: image_tag
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.DOCKER_USERNAME }}/frontend:staging -t ${{ env.DOCKER_USERNAME }}/frontend:${{ steps.image_tag.outputs.tag }} -f frontend/Dockerfile frontend
          docker push ${{ env.DOCKER_USERNAME }}/frontend:staging
          docker push ${{ env.DOCKER_USERNAME }}/frontend:${{ steps.image_tag.outputs.tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: https://staging.inspira-project.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
      
      - name: Create and verify namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          echo "Waiting for namespace to be ready..."
          kubectl get namespace ${{ env.NAMESPACE }}
      
      - name: Update Kubernetes manifests with new image tag
        run: |
          TAG=${{ needs.build.outputs.image_tag }}
          find k8s/overlays/staging -type f -name '*-deployment.yaml' -exec sed -i "s|image: ${{ env.DOCKER_USERNAME }}/frontend:.*|image: ${{ env.DOCKER_USERNAME }}/frontend:$TAG|g" {} +
          echo "Updated image tags to $TAG"

      - name: Deploy to staging
        run: |
          # Apply namespace first
          kubectl apply -f k8s/overlays/staging/namespace.yaml
          
          # Wait for namespace to be active
          kubectl wait --for=condition=Active namespace/${{ env.NAMESPACE }} --timeout=30s
          
          # Apply deployments
          kubectl apply -f k8s/overlays/staging/frontend-deployment.yaml
          kubectl apply -f k8s/overlays/staging/ingress.yaml
          
          # Wait for rollouts
          kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=5m
      
      - name: Health check
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Check if frontend service exists
          kubectl get service frontend -n ${{ env.NAMESPACE }}
          
          # Get service IP
          FRONTEND_IP=$(kubectl get service frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Frontend service IP: $FRONTEND_IP"
          
          # Check health endpoint
          if [ -n "$FRONTEND_IP" ]; then
            curl -f http://$FRONTEND_IP/health || (echo "Health check failed" && exit 1)
            echo "Health check passed!"
          else
            echo "Could not get frontend IP"
            exit 1
          fi 